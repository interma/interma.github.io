---
layout: post
title:  "How to test GPDB"
subtitle:  "如何执行 GPDB 测试"
author: 姚延栋
date:   2015-11-10 11:20:43
categories: GPDB test
---

### 如何执行 GPDB 的测试

#### 基本步骤

在运行这些测试前，需要启动 GPDB，并且 export PGPORT和MASTER_DATA_DIRECTORY 两个环境变量

    -bash-4.1$ echo $MASTER_DATA_DIRECTORY
    /home/gpadmin/data/gpdb.master/master/gpseg-1
    -bash-4.1$ echo $PGPORT
    5432

运行测试

    $ cd $topdir
    $ make installcheck-good

或者直接进入测试代码目录

    $ cd $topdir/src/test
    $ make installcheck-good

installcheck-good 目标会进入 src/test 并执行相应的测试，而该目录下得 Makefile 直接调用 `$(MAKE) -C regress $@`

    check installcheck installcheck-parallel installcheck-good:
            $(MAKE) -C src/test $@

src/test/Makefile. 使用了 .DEFAULT 目标。

    .DEFAULT:
    	$(MAKE) -C regress $@

#### installcheck-good 测试内容

installcheck-good 调用 pg_regress 执行2个schedule：

* parallel_schedule: 包含 PostgreSQL 社区的测试用例，和 GPDB 有冲突的测试被 disable 了。
* greenplum_schedule： 包含 GPDB 的测试用例


#### 运行单个测试

     // make installcheck-good TT=float4 由于 f18c7e45f683924112d9ebdfef748557be3d8ac2，这种方式不行了。
     ./pg_regress <testname>

例如

    ./pg_regress custom_format

对于 bugbuster 测试：

    ./pg_regress --inputdir=bugbuster  --outputdir=bugbuster <testname>


### pg_regress 介绍

pg_regress 是 GPDB 回归测试驱动程序。它会根据一定的规则运行特定目录里面的 SQL 脚本，并将测试结果和期望的结果进行比较。

#### 基本原理

默认运行 sql 目录下得脚本文件（根据名字可以运行指定脚本），将结果保存到 resuls/*.out 下面，并和 expected/*.out 进行比较。

#### 模板支持

如果 SQL 脚本中需要使用某些变量、占位符，譬如 SQL 和主机名或者某些目录相关，则可以使用类似模板的技术。

在 input 目录下得 sql 脚本可以包含例如 @var@ 的变量， pg_regress 执行时，会动态生成 sql 脚本，并运行。

#### GPDB enhancement

GPDB 提供了几个 perl 脚本以执行某些处理，这些脚本默认位于 src/test/regress 目录下。 运行这个目录下的测试程序没有问题，
但是如果在其他目录下，譬如 extension/gpfdist，如果需要执行模板中的变量替换，会报告找不到 gpstringsub.pl 脚本的错误。

有几个主要的目录：

* inputdir: 默认是当前目录
* outputdir： 默认是当前目录
* srcdir: 源代码目录的绝对路径 （用于 VPATH 编译）
* temp-install： 临时安装目录
* bindir: 这个变量很重要，它来自于 pg_config_paths.h 和 Makefile。 如果找不到正确的路径，多半是 ./configure --prefix=/path 设置错了。

#### pg_regress 内部运行机制

pg_regress 启动后根据是运行 schedule 还是单个测试执行不同的路径。 如果是schedule，则会执行 schedule 内描述的测试
用例。

对于每个 test，使用函数指针调用 `psql_start_test` 运行该测试对应的 sql 文件。

`psql_start_test` fork 一个子进程执行 psql 文件。

执行结束后，调用 `results_diff` 比较结果。

      73 const char *basic_diff_opts = "-w -I NOTICE: -I HINT: -I CONTEXT: -I GP_IGNORE:";
      74 const char *pretty_diff_opts = "-w -I NOTICE: -I HINT: -I CONTEXT: -I GP_IGNORE: -C3";

执行的 diff 命令：

      ./gpdiff.pl -w -I NOTICE: -I HINT: -I CONTEXT: -I GP_IGNORE: ./expected/percentile.out ./results/percentile.out > ./results/percentile.out.diff


      ./gpdiff.pl -w -I NOTICE: -I HINT: -I CONTEXT: -I GP_IGNORE: -C3 ./expected/percentile.out ./results/percentile.out >> ./regression.diffs

#### gpdiff.pl & atmsort.pl

gpdiff.pl 对比较文件首先调用 atmsort.pl 进行处理，然后比较他们的结果。 目的是忽略掉某些GPDB的消息，也会处理多个segment造成
结果顺序不一致的问题。  `atmsort.pl --man` 可以看到更多信息。

`make install-check` 时 pg_regress 会调用 gpdiff，选项如下，这些选项都是由 diff 来处理的：


     "-w -I NOTICE: -I HINT: -I CONTEXT: -I GP_IGNORE:".

##### gpdiff.pl 处理流程

gpdiff.pl 会对两个输入（目录或者文件）进行预处理，然后调用diff。 如果是两个文件，则调用 gpdiff_files().

gpdiff_files() 首先创建2个临时文件用以保存对待比较文件的处理结果，包括排序等。 临时文件名格式如：/tmp/fileeHTcTAV.

然后分别对两个待比较文件进行预处理，预处理由 atmsort.pm 完成：

   atmsort::atmsort_init(%glob_atmsort_args);
   atmsort::run($f1, $newf1);       // $f1 是待比较的文件之一， $newf1 是一个临时文件，将会保存对文件 $f1 的预处理结果。

然后对预处理的两个文件调用 diff，生成最终的结果：

   my $outi = `$ATMDIFF $args`;     // $ATMDIFF is diff.


